/*
 * Users API
 *
 * The users API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.ComponentModel.DataAnnotations;
using Domivice.Users.Web.Attributes;
using Domivice.Users.Web.Models;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.AspNetCore.Annotations;

namespace Domivice.Users.Web.Controllers;

/// <summary>
/// </summary>
[ApiController]
public class DaysOffApiController : ControllerBase
{
    /// <summary>
    ///     Delete Day Off
    /// </summary>
    /// <param name="userId">The string guid representing the user id</param>
    /// <param name="dayOffId">The day off id</param>
    /// <response code="204">Response when the day off we deleted.</response>
    /// <response code="401">User is not authenticated</response>
    /// <response code="403">User is not allowed to perform action</response>
    /// <response code="404">The resource was not found</response>
    [HttpDelete]
    [Route("/v1/users/{userId}/days-off/{dayOffId}")]
    [ValidateModelState]
    [SwaggerOperation("V1UsersUserIdDaysOffDayOffIdDelete")]
    [SwaggerResponse(401, type: typeof(Error), description: "User is not authenticated")]
    [SwaggerResponse(403, type: typeof(Error), description: "User is not allowed to perform action")]
    [SwaggerResponse(404, type: typeof(Error), description: "The resource was not found")]
    public virtual IActionResult V1UsersUserIdDaysOffDayOffIdDelete(
        [FromRoute(Name = "userId")] [Required] string userId,
        [FromRoute(Name = "dayOffId")] [Required] string dayOffId)
    {
        //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(204);
        //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(401, default(Error));
        //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(403, default(Error));
        //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(404, default(Error));

        throw new NotImplementedException();
    }

    /// <summary>
    ///     Get Day Off
    /// </summary>
    /// <param name="userId">The string guid representing the user id</param>
    /// <param name="dayOffId">The day off id</param>
    /// <response code="200">The response when a day off object is returned</response>
    /// <response code="401">User is not authenticated</response>
    /// <response code="404">The resource was not found</response>
    [HttpGet]
    [Route("/v1/users/{userId}/days-off/{dayOffId}")]
    [ValidateModelState]
    [SwaggerOperation("V1UsersUserIdDaysOffDayOffIdGet")]
    [SwaggerResponse(200, type: typeof(DayOff), description: "The response when a day off object is returned")]
    [SwaggerResponse(401, type: typeof(Error), description: "User is not authenticated")]
    [SwaggerResponse(404, type: typeof(Error), description: "The resource was not found")]
    public virtual IActionResult V1UsersUserIdDaysOffDayOffIdGet([FromRoute(Name = "userId")] [Required] string userId,
        [FromRoute(Name = "dayOffId")] [Required] string dayOffId)
    {
        //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(200, default(DayOff));
        //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(401, default(Error));
        //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(404, default(Error));
        string exampleJson = null;
        exampleJson =
            "{\n  \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"id\" : \"id\",\n  \"userId\" : \"userId\",\n  \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"\n}";

        var example = exampleJson != null
            ? JsonConvert.DeserializeObject<DayOff>(exampleJson)
            : default;
        //TODO: Change the data returned
        return new ObjectResult(example);
    }

    /// <summary>
    ///     Patch Day Off
    /// </summary>
    /// <param name="userId">The string guid representing the user id</param>
    /// <param name="dayOffId">The day off id</param>
    /// <param name="dayOffUpdate"></param>
    /// <response code="200">Response when the day off was updated successfully.</response>
    /// <response code="400">There was an error with the request</response>
    /// <response code="401">User is not authenticated</response>
    /// <response code="404">The resource was not found</response>
    [HttpPatch]
    [Route("/v1/users/{userId}/days-off/{dayOffId}")]
    [Consumes("application/json")]
    [ValidateModelState]
    [SwaggerOperation("V1UsersUserIdDaysOffDayOffIdPatch")]
    [SwaggerResponse(200, type: typeof(DayOff), description: "Response when the day off was updated successfully.")]
    [SwaggerResponse(400, type: typeof(Error), description: "There was an error with the request")]
    [SwaggerResponse(401, type: typeof(Error), description: "User is not authenticated")]
    [SwaggerResponse(404, type: typeof(Error), description: "The resource was not found")]
    public virtual IActionResult V1UsersUserIdDaysOffDayOffIdPatch(
        [FromRoute(Name = "userId")] [Required] string userId,
        [FromRoute(Name = "dayOffId")] [Required] string dayOffId, [FromBody] DayOffUpdate dayOffUpdate)
    {
        //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(200, default(DayOff));
        //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(400, default(Error));
        //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(401, default(Error));
        //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(404, default(Error));
        string exampleJson = null;
        exampleJson =
            "{\n  \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"id\" : \"id\",\n  \"userId\" : \"userId\",\n  \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"\n}";

        var example = exampleJson != null
            ? JsonConvert.DeserializeObject<DayOff>(exampleJson)
            : default;
        //TODO: Change the data returned
        return new ObjectResult(example);
    }

    /// <summary>
    ///     List Days Off
    /// </summary>
    /// <param name="userId">The string guid representing the user id</param>
    /// <response code="200">Response when a list of 0 or more days off is returned</response>
    /// <response code="401">User is not authenticated</response>
    [HttpGet]
    [Route("/v1/users/{userId}/days-off")]
    [ValidateModelState]
    [SwaggerOperation("V1UsersUserIdDaysOffGet")]
    [SwaggerResponse(200, type: typeof(DaysOffList),
        description: "Response when a list of 0 or more days off is returned")]
    [SwaggerResponse(401, type: typeof(Error), description: "User is not authenticated")]
    public virtual IActionResult V1UsersUserIdDaysOffGet([FromRoute(Name = "userId")] [Required] string userId)
    {
        //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(200, default(DaysOffList));
        //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(401, default(Error));
        string exampleJson = null;
        exampleJson =
            "{\n  \"totalItemsCount\" : 6,\n  \"pageCount\" : 0,\n  \"previousPage\" : \"previousPage\",\n  \"data\" : [ {\n    \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"id\" : \"id\",\n    \"userId\" : \"userId\",\n    \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"id\" : \"id\",\n    \"userId\" : \"userId\",\n    \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"nextPage\" : \"nextPage\"\n}";

        var example = exampleJson != null
            ? JsonConvert.DeserializeObject<DaysOffList>(exampleJson)
            : default;
        //TODO: Change the data returned
        return new ObjectResult(example);
    }

    /// <summary>
    ///     Create Day Off
    /// </summary>
    /// <param name="userId">The string guid representing the user id</param>
    /// <param name="dayOffCreate"></param>
    /// <response code="201">Response when a day off is created successfully</response>
    /// <response code="400">There was an error with the request</response>
    /// <response code="401">User is not authenticated</response>
    [HttpPost]
    [Route("/v1/users/{userId}/days-off")]
    [Consumes("application/json")]
    [ValidateModelState]
    [SwaggerOperation("V1UsersUserIdDaysOffPost")]
    [SwaggerResponse(201, type: typeof(DayOff), description: "Response when a day off is created successfully")]
    [SwaggerResponse(400, type: typeof(Error), description: "There was an error with the request")]
    [SwaggerResponse(401, type: typeof(Error), description: "User is not authenticated")]
    public virtual IActionResult V1UsersUserIdDaysOffPost([FromRoute(Name = "userId")] [Required] string userId,
        [FromBody] DayOffCreate dayOffCreate)
    {
        //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(201, default(DayOff));
        //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(400, default(Error));
        //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(401, default(Error));
        string exampleJson = null;
        exampleJson =
            "{\n  \"endDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"id\" : \"id\",\n  \"userId\" : \"userId\",\n  \"startDate\" : \"2000-01-23T04:56:07.000+00:00\"\n}";

        var example = exampleJson != null
            ? JsonConvert.DeserializeObject<DayOff>(exampleJson)
            : default;
        //TODO: Change the data returned
        return new ObjectResult(example);
    }
}