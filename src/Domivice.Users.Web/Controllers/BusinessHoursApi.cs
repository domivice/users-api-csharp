/*
 * Users API
 *
 * The users API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.ComponentModel.DataAnnotations;
using Domivice.Users.Web.Attributes;
using Domivice.Users.Web.Models;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.AspNetCore.Annotations;

namespace Domivice.Users.Web.Controllers;

/// <summary>
/// </summary>
[ApiController]
public class BusinessHoursApiController : ControllerBase
{
    /// <summary>
    ///     Delete Business Hours
    /// </summary>
    /// <param name="userId">The string guid representation of the user id</param>
    /// <param name="businessHourId">The string guid representation of the business hour id</param>
    /// <response code="204">Response when the business hours is deleted</response>
    /// <response code="401">User is not authenticated</response>
    /// <response code="403">User is not allowed to perform action</response>
    /// <response code="404">The resource was not found</response>
    [HttpDelete]
    [Route("/v1/users/{userId}/business-hours/{businessHourId}")]
    [ValidateModelState]
    [SwaggerOperation("V1UsersUserIdBusinessHoursBusinessHourIdDelete")]
    [SwaggerResponse(401, type: typeof(Error), description: "User is not authenticated")]
    [SwaggerResponse(403, type: typeof(Error), description: "User is not allowed to perform action")]
    [SwaggerResponse(404, type: typeof(Error), description: "The resource was not found")]
    public virtual IActionResult V1UsersUserIdBusinessHoursBusinessHourIdDelete(
        [FromRoute(Name = "userId")] [Required] string userId,
        [FromRoute(Name = "businessHourId")] [Required] string businessHourId)
    {
        //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(204);
        //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(401, default(Error));
        //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(403, default(Error));
        //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(404, default(Error));

        throw new NotImplementedException();
    }

    /// <summary>
    ///     Get Business Hours
    /// </summary>
    /// <param name="userId">The string guid representation of the user id</param>
    /// <param name="businessHourId">The string guid representation of the business hour id</param>
    /// <response code="200">Response when an business hours object is returned</response>
    /// <response code="401">User is not authenticated</response>
    /// <response code="404">The resource was not found</response>
    [HttpGet]
    [Route("/v1/users/{userId}/business-hours/{businessHourId}")]
    [ValidateModelState]
    [SwaggerOperation("V1UsersUserIdBusinessHoursBusinessHourIdGet")]
    [SwaggerResponse(200, type: typeof(BusinessHours),
        description: "Response when an business hours object is returned")]
    [SwaggerResponse(401, type: typeof(Error), description: "User is not authenticated")]
    [SwaggerResponse(404, type: typeof(Error), description: "The resource was not found")]
    public virtual IActionResult V1UsersUserIdBusinessHoursBusinessHourIdGet(
        [FromRoute(Name = "userId")] [Required] string userId,
        [FromRoute(Name = "businessHourId")] [Required] string businessHourId)
    {
        //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(200, default(BusinessHours));
        //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(401, default(Error));
        //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(404, default(Error));
        string exampleJson = null;
        exampleJson =
            "{\n  \"validThrough\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"timeSlots\" : [ {\n    \"dayOfWeek\" : \"monday\",\n    \"startTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"endTime\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"dayOfWeek\" : \"monday\",\n    \"startTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"endTime\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"validFrom\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"id\" : \"id\",\n  \"userId\" : \"userId\"\n}";

        var example = exampleJson != null
            ? JsonConvert.DeserializeObject<BusinessHours>(exampleJson)
            : default;
        //TODO: Change the data returned
        return new ObjectResult(example);
    }

    /// <summary>
    ///     Patch Business Hours
    /// </summary>
    /// <param name="userId">The string guid representation of the user id</param>
    /// <param name="businessHourId">The string guid representation of the business hour id</param>
    /// <param name="businessHoursUpdate"></param>
    /// <response code="200">Response when the business hours have been successfully updated.</response>
    /// <response code="400">There was an error with the request</response>
    /// <response code="401">User is not authenticated</response>
    /// <response code="403">User is not allowed to perform action</response>
    /// <response code="404">The resource was not found</response>
    [HttpPatch]
    [Route("/v1/users/{userId}/business-hours/{businessHourId}")]
    [Consumes("application/json")]
    [ValidateModelState]
    [SwaggerOperation("V1UsersUserIdBusinessHoursBusinessHourIdPatch")]
    [SwaggerResponse(200, type: typeof(BusinessHours),
        description: "Response when the business hours have been successfully updated.")]
    [SwaggerResponse(400, type: typeof(Error), description: "There was an error with the request")]
    [SwaggerResponse(401, type: typeof(Error), description: "User is not authenticated")]
    [SwaggerResponse(403, type: typeof(Error), description: "User is not allowed to perform action")]
    [SwaggerResponse(404, type: typeof(Error), description: "The resource was not found")]
    public virtual IActionResult V1UsersUserIdBusinessHoursBusinessHourIdPatch(
        [FromRoute(Name = "userId")] [Required] string userId,
        [FromRoute(Name = "businessHourId")] [Required] string businessHourId,
        [FromBody] BusinessHoursUpdate businessHoursUpdate)
    {
        //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(200, default(BusinessHours));
        //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(400, default(Error));
        //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(401, default(Error));
        //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(403, default(Error));
        //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(404, default(Error));
        string exampleJson = null;
        exampleJson =
            "{\n  \"validThrough\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"timeSlots\" : [ {\n    \"dayOfWeek\" : \"monday\",\n    \"startTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"endTime\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"dayOfWeek\" : \"monday\",\n    \"startTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"endTime\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"validFrom\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"id\" : \"id\",\n  \"userId\" : \"userId\"\n}";

        var example = exampleJson != null
            ? JsonConvert.DeserializeObject<BusinessHours>(exampleJson)
            : default;
        //TODO: Change the data returned
        return new ObjectResult(example);
    }

    /// <summary>
    ///     Create Business Hours
    /// </summary>
    /// <param name="userId">The string guid representation of the user id</param>
    /// <param name="businessHoursCreate"></param>
    /// <response code="201">Response when the business hours have been created successfully.</response>
    /// <response code="400">There was an error with the request</response>
    /// <response code="401">User is not authenticated</response>
    [HttpPost]
    [Route("/v1/users/{userId}/business-hours")]
    [Consumes("application/json")]
    [ValidateModelState]
    [SwaggerOperation("V1UsersUserIdBusinessHoursPost")]
    [SwaggerResponse(201, type: typeof(BusinessHours),
        description: "Response when the business hours have been created successfully.")]
    [SwaggerResponse(400, type: typeof(Error), description: "There was an error with the request")]
    [SwaggerResponse(401, type: typeof(Error), description: "User is not authenticated")]
    public virtual IActionResult V1UsersUserIdBusinessHoursPost([FromRoute(Name = "userId")] [Required] string userId,
        [FromBody] BusinessHoursCreate businessHoursCreate)
    {
        //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(201, default(BusinessHours));
        //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(400, default(Error));
        //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(401, default(Error));
        string exampleJson = null;
        exampleJson =
            "{\n  \"validThrough\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"timeSlots\" : [ {\n    \"dayOfWeek\" : \"monday\",\n    \"startTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"endTime\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"dayOfWeek\" : \"monday\",\n    \"startTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"endTime\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"validFrom\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"id\" : \"id\",\n  \"userId\" : \"userId\"\n}";

        var example = exampleJson != null
            ? JsonConvert.DeserializeObject<BusinessHours>(exampleJson)
            : default;
        //TODO: Change the data returned
        return new ObjectResult(example);
    }
}