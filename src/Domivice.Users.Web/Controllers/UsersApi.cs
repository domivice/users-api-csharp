/*
 * Users API
 *
 * The users API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System.ComponentModel.DataAnnotations;
using System.Threading.Tasks;
using Domivice.PagingSorting.Web.Models;
using Domivice.Users.Application.Users.Commands.DeleteUser;
using Domivice.Users.Application.Users.Queries.GetUser;
using Domivice.Users.Application.Users.Queries.GetUsers;
using Domivice.Users.Application.Users.ReadModels;
using Domivice.Users.Web.Attributes;
using Domivice.Users.Web.Constants;
using Domivice.Users.Web.Extensions;
using Domivice.Users.Web.Models;
using FluentResults;
using MediatR;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Error = Domivice.Users.Web.Models.Error;

namespace Domivice.Users.Web.Controllers;

/// <summary>
/// </summary>
public class UsersApiController : DomiviceControllerBase
{
    private readonly ISender _mediatorSender;

    /// <summary>
    /// 
    /// </summary>
    /// <param name="mediatorSender"></param>
    public UsersApiController(ISender mediatorSender)
    {
        _mediatorSender = mediatorSender;
    }

    /// <summary>
    ///     List Users
    /// </summary>
    /// <param name="queryParams"></param>
    /// <response code="200">When a list of 0 or more users are returned</response>
    /// <response code="401">User is not authenticated</response>
    [HttpGet]
    [Route("/v1/users")]
    [Authorize(Roles = nameof(UserRoles.AppAdmin))]
    [ValidateModelState]
    [SwaggerOperation("V1UsersGet")]
    [SwaggerResponse(200, type: typeof(UserList), description: "When a list of 0 or more users are returned")]
    [SwaggerResponse(401, type: typeof(Error), description: "User is not authenticated")]
    public async Task<IActionResult> V1UsersGet([FromQuery] GetUsersQueryParams queryParams)
    {
        var result = await _mediatorSender.Send(new GetUsersQuery
        {
            Search = queryParams.Search,
            Page = queryParams.Page,
            PageSize = queryParams.PageSize,
            SortFields = queryParams.GetSortFields()
        });

        return result.IsSuccess ? Ok(new PaginatedResult<BasicUserRm>(result.Value, queryParams)) : Problem(result);
    }

    /// <summary>
    ///     Delete User
    /// </summary>
    /// <param name="userId">The user id</param>
    /// <response code="204">Response when the user has been deleted</response>
    /// <response code="401">User is not authenticated</response>
    /// <response code="403">User is not allowed to perform action</response>
    /// <response code="404">The resource was not found</response>
    [HttpDelete]
    [Route("/v1/users/{userId}")]
    [AuthorizeUser]
    [ValidateModelState]
    [SwaggerOperation("V1UsersUserIdDelete")]
    [SwaggerResponse(401, type: typeof(Error), description: "User is not authenticated")]
    [SwaggerResponse(403, type: typeof(Error), description: "User is not allowed to perform action")]
    [SwaggerResponse(404, type: typeof(Error), description: "The resource was not found")]
    public async Task<IActionResult> V1UsersUserIdDelete([FromRoute(Name = "userId")] [Required] string userId)
    {
        var result = await _mediatorSender.Send(new DeleteUserCommand(userId));

        return result.IsSuccess ? NoContent() : Problem(Result.Fail<bool>(result.Errors));
    }

    /// <summary>
    ///     Get User
    /// </summary>
    /// <param name="userId">The user id</param>
    /// <response code="200">Response when a user object is returned</response>
    /// <response code="401">User is not authenticated</response>
    /// <response code="404">The resource was not found</response>
    [HttpGet]
    [Route("/v1/users/{userId}")]
    [AuthorizeUser]
    [ValidateModelState]
    [SwaggerOperation("V1UsersUserIdGet")]
    [SwaggerResponse(200, type: typeof(User), description: "Response when a user object is returned")]
    [SwaggerResponse(401, type: typeof(Error), description: "User is not authenticated")]
    [SwaggerResponse(404, type: typeof(Error), description: "The resource was not found")]
    public async Task<IActionResult> V1UsersUserIdGet([FromRoute(Name = "userId")] [Required] string userId)
    {
        var result = await _mediatorSender.Send(new GetUserQuery(userId));

        return result.IsSuccess ? Ok(result.Value.ToUser()) : Problem(result);
    }

    /// <summary>
    ///     Update User
    /// </summary>
    /// <param name="userId">The user id</param>
    /// <param name="userUpdate"></param>
    /// <response code="200">User update was successful </response>
    /// <response code="400">There was an error with the request</response>
    /// <response code="401">User is not authenticated</response>
    /// <response code="403">User is not allowed to perform action</response>
    /// <response code="404">The resource was not found</response>
    [HttpPatch]
    [Route("/v1/users/{userId}")]
    [AuthorizeUser]
    [Consumes("application/json")]
    [ValidateModelState]
    [SwaggerOperation("V1UsersUserIdPatch")]
    [SwaggerResponse(200, type: typeof(User), description: "User update was successful ")]
    [SwaggerResponse(400, type: typeof(Error), description: "There was an error with the request")]
    [SwaggerResponse(401, type: typeof(Error), description: "User is not authenticated")]
    [SwaggerResponse(403, type: typeof(Error), description: "User is not allowed to perform action")]
    [SwaggerResponse(404, type: typeof(Error), description: "The resource was not found")]
    public async Task<IActionResult> V1UsersUserIdPatch([FromRoute(Name = "userId")] [Required] string userId,
        [FromBody] UserUpdate userUpdate)
    {
        var result = await _mediatorSender.Send(userUpdate.ToCommand(userId));

        return result.IsSuccess ? Ok(result.Value.ToUser()) : Problem(result);
    }
}