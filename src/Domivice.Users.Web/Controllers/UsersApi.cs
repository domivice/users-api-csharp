/*
 * Users API
 *
 * The users API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.ComponentModel.DataAnnotations;
using Domivice.Users.Web.Attributes;
using Domivice.Users.Web.Models;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.AspNetCore.Annotations;

namespace Domivice.Users.Web.Controllers;

/// <summary>
/// </summary>
[ApiController]
public class UsersApiController : ControllerBase
{
    /// <summary>
    ///     List Users
    /// </summary>
    /// <param name="search">A search term to search users on firstName, lastName, email and phoneNumbers.</param>
    /// <param name="status">The status to filter users by status</param>
    /// <param name="page">The page requested. Page parameter can only be a positive integer greater than 0.</param>
    /// <param name="pageSize">The requested page size. Page size can only be between 1 and 100</param>
    /// <param name="sort">The result sorting. field1[:asc|desc][,field2[:asc|desc]] e.g. firstName:desc,email:asc</param>
    /// <response code="200">When a list of 0 or more users are returned</response>
    /// <response code="401">User is not authenticated</response>
    [HttpGet]
    [Route("/v1/users")]
    [ValidateModelState]
    [SwaggerOperation("V1UsersGet")]
    [SwaggerResponse(200, type: typeof(UserList), description: "When a list of 0 or more users are returned")]
    [SwaggerResponse(401, type: typeof(Error), description: "User is not authenticated")]
    public virtual IActionResult V1UsersGet([FromQuery(Name = "search")] string search,
        [FromQuery(Name = "status")] string status, [FromQuery(Name = "page")] int? page,
        [FromQuery(Name = "pageSize")] int? pageSize, [FromQuery(Name = "sort")] string sort)
    {
        //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(200, default(UserList));
        //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(401, default(Error));
        string exampleJson = null;
        exampleJson =
            "{\n  \"totalItemsCount\" : 6,\n  \"pageCount\" : 0,\n  \"previousPage\" : \"previousPage\",\n  \"data\" : [ {\n    \"firstName\" : \"firstName\",\n    \"lastName\" : \"lastName\",\n    \"phoneNumber\" : \"phoneNumber\",\n    \"id\" : \"id\",\n    \"email\" : \"email\",\n    \"status\" : \"status\"\n  }, {\n    \"firstName\" : \"firstName\",\n    \"lastName\" : \"lastName\",\n    \"phoneNumber\" : \"phoneNumber\",\n    \"id\" : \"id\",\n    \"email\" : \"email\",\n    \"status\" : \"status\"\n  } ],\n  \"nextPage\" : \"nextPage\"\n}";

        var example = exampleJson != null
            ? JsonConvert.DeserializeObject<UserList>(exampleJson)
            : default;
        //TODO: Change the data returned
        return new ObjectResult(example);
    }

    /// <summary>
    ///     Delete User
    /// </summary>
    /// <param name="userId">The user id</param>
    /// <response code="204">Response when the user has been deleted</response>
    /// <response code="401">User is not authenticated</response>
    /// <response code="403">User is not allowed to perform action</response>
    /// <response code="404">The resource was not found</response>
    [HttpDelete]
    [Route("/v1/users/{userId}")]
    [ValidateModelState]
    [SwaggerOperation("V1UsersUserIdDelete")]
    [SwaggerResponse(401, type: typeof(Error), description: "User is not authenticated")]
    [SwaggerResponse(403, type: typeof(Error), description: "User is not allowed to perform action")]
    [SwaggerResponse(404, type: typeof(Error), description: "The resource was not found")]
    public virtual IActionResult V1UsersUserIdDelete([FromRoute(Name = "userId")] [Required] string userId)
    {
        //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(204);
        //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(401, default(Error));
        //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(403, default(Error));
        //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(404, default(Error));

        throw new NotImplementedException();
    }

    /// <summary>
    ///     Get User
    /// </summary>
    /// <param name="userId">The user id</param>
    /// <response code="200">Response when a user object is returned</response>
    /// <response code="401">User is not authenticated</response>
    /// <response code="404">The resource was not found</response>
    [HttpGet]
    [Route("/v1/users/{userId}")]
    [ValidateModelState]
    [SwaggerOperation("V1UsersUserIdGet")]
    [SwaggerResponse(200, type: typeof(User), description: "Response when a user object is returned")]
    [SwaggerResponse(401, type: typeof(Error), description: "User is not authenticated")]
    [SwaggerResponse(404, type: typeof(Error), description: "The resource was not found")]
    public virtual IActionResult V1UsersUserIdGet([FromRoute(Name = "userId")] [Required] string userId)
    {
        //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(200, default(User));
        //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(401, default(Error));
        //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(404, default(Error));
        string exampleJson = null;
        exampleJson =
            "{\n  \"firstName\" : \"firstName\",\n  \"lastName\" : \"lastName\",\n  \"phoneNumber\" : \"phoneNumber\",\n  \"id\" : \"id\",\n  \"email\" : \"email\",\n  \"status\" : \"status\"\n}";

        var example = exampleJson != null
            ? JsonConvert.DeserializeObject<User>(exampleJson)
            : default;
        //TODO: Change the data returned
        return new ObjectResult(example);
    }

    /// <summary>
    ///     Update User
    /// </summary>
    /// <param name="userId">The user id</param>
    /// <param name="userUpdate"></param>
    /// <response code="200">User update was successful </response>
    /// <response code="400">There was an error with the request</response>
    /// <response code="401">User is not authenticated</response>
    /// <response code="403">User is not allowed to perform action</response>
    /// <response code="404">The resource was not found</response>
    [HttpPatch]
    [Route("/v1/users/{userId}")]
    [Consumes("application/json")]
    [ValidateModelState]
    [SwaggerOperation("V1UsersUserIdPatch")]
    [SwaggerResponse(200, type: typeof(User), description: "User update was successful ")]
    [SwaggerResponse(400, type: typeof(Error), description: "There was an error with the request")]
    [SwaggerResponse(401, type: typeof(Error), description: "User is not authenticated")]
    [SwaggerResponse(403, type: typeof(Error), description: "User is not allowed to perform action")]
    [SwaggerResponse(404, type: typeof(Error), description: "The resource was not found")]
    public virtual IActionResult V1UsersUserIdPatch([FromRoute(Name = "userId")] [Required] string userId,
        [FromBody] UserUpdate userUpdate)
    {
        //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(200, default(User));
        //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(400, default(Error));
        //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(401, default(Error));
        //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(403, default(Error));
        //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(404, default(Error));
        string exampleJson = null;
        exampleJson =
            "{\n  \"firstName\" : \"firstName\",\n  \"lastName\" : \"lastName\",\n  \"phoneNumber\" : \"phoneNumber\",\n  \"id\" : \"id\",\n  \"email\" : \"email\",\n  \"status\" : \"status\"\n}";

        var example = exampleJson != null
            ? JsonConvert.DeserializeObject<User>(exampleJson)
            : default;
        //TODO: Change the data returned
        return new ObjectResult(example);
    }
}