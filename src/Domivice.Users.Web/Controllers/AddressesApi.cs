/*
 * Users API
 *
 * The users API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.ComponentModel.DataAnnotations;
using Domivice.Users.Web.Attributes;
using Domivice.Users.Web.Models;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.AspNetCore.Annotations;

namespace Domivice.Users.Web.Controllers;

/// <summary>
/// </summary>
[ApiController]
public class AddressesApiController : ControllerBase
{
    /// <summary>
    ///     Create address
    /// </summary>
    /// <param name="userId">The string guid representation of the user id</param>
    /// <param name="addressCreate">The json representation of new address</param>
    /// <response code="201">Response when new address is created</response>
    /// <response code="400">There was an error with the request</response>
    /// <response code="401">User is not authenticated</response>
    [HttpPost]
    [Route("/v1/users/{userId}/addresses")]
    [Consumes("application/json")]
    [ValidateModelState]
    [SwaggerOperation("CreateAddress")]
    [SwaggerResponse(201, type: typeof(Address), description: "Response when new address is created")]
    [SwaggerResponse(400, type: typeof(Error), description: "There was an error with the request")]
    [SwaggerResponse(401, type: typeof(Error), description: "User is not authenticated")]
    public virtual IActionResult CreateAddress([FromRoute(Name = "userId")] [Required] string userId,
        [FromBody] AddressCreate addressCreate)
    {
        //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(201, default(Address));
        //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(400, default(Error));
        //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(401, default(Error));
        string exampleJson = null;
        exampleJson =
            "{\n  \"country\" : \"country\",\n  \"city\" : \"city\",\n  \"postalCode\" : \"postalCode\",\n  \"addressLine1\" : \"addressLine1\",\n  \"addressLine2\" : \"addressLine2\",\n  \"addressLine3\" : \"addressLine3\",\n  \"state\" : \"state\",\n  \"id\" : \"id\",\n  \"type\" : \"Primary\",\n  \"userId\" : \"userId\"\n}";

        var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Address>(exampleJson)
            : default;
        //TODO: Change the data returned
        return new ObjectResult(example);
    }

    /// <summary>
    ///     Delete Address
    /// </summary>
    /// <param name="userId">The string guid representing the user id</param>
    /// <param name="addressId">The string guid representing the address id</param>
    /// <response code="204">Response when the address was deleted successfully</response>
    /// <response code="401">User is not authenticated</response>
    /// <response code="403">User is not allowed to perform action</response>
    /// <response code="404">The resource was not found</response>
    [HttpDelete]
    [Route("/v1/users/{userId}/addresses/{addressId}")]
    [ValidateModelState]
    [SwaggerOperation("DeleteAddress")]
    [SwaggerResponse(401, type: typeof(Error), description: "User is not authenticated")]
    [SwaggerResponse(403, type: typeof(Error), description: "User is not allowed to perform action")]
    [SwaggerResponse(404, type: typeof(Error), description: "The resource was not found")]
    public virtual IActionResult DeleteAddress([FromRoute(Name = "userId")] [Required] string userId,
        [FromRoute(Name = "addressId")] [Required] string addressId)
    {
        //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(204);
        //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(401, default(Error));
        //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(403, default(Error));
        //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(404, default(Error));

        throw new NotImplementedException();
    }

    /// <summary>
    ///     Get Address
    /// </summary>
    /// <param name="userId">The string guid representing the user id</param>
    /// <param name="addressId">The string guid representing the address id</param>
    /// <response code="200">Response when an address is returned</response>
    /// <response code="401">User is not authenticated</response>
    /// <response code="404">The resource was not found</response>
    [HttpGet]
    [Route("/v1/users/{userId}/addresses/{addressId}")]
    [ValidateModelState]
    [SwaggerOperation("GetAddress")]
    [SwaggerResponse(200, type: typeof(Address), description: "Response when an address is returned")]
    [SwaggerResponse(401, type: typeof(Error), description: "User is not authenticated")]
    [SwaggerResponse(404, type: typeof(Error), description: "The resource was not found")]
    public virtual IActionResult GetAddress([FromRoute(Name = "userId")] [Required] string userId,
        [FromRoute(Name = "addressId")] [Required] string addressId)
    {
        //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(200, default(Address));
        //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(401, default(Error));
        //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(404, default(Error));
        string exampleJson = null;
        exampleJson =
            "{\n  \"country\" : \"country\",\n  \"city\" : \"city\",\n  \"postalCode\" : \"postalCode\",\n  \"addressLine1\" : \"addressLine1\",\n  \"addressLine2\" : \"addressLine2\",\n  \"addressLine3\" : \"addressLine3\",\n  \"state\" : \"state\",\n  \"id\" : \"id\",\n  \"type\" : \"Primary\",\n  \"userId\" : \"userId\"\n}";

        var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Address>(exampleJson)
            : default;
        //TODO: Change the data returned
        return new ObjectResult(example);
    }

    /// <summary>
    ///     List addresses
    /// </summary>
    /// <param name="userId">The string guid representation of the user id</param>
    /// <param name="type">Filter by the address type</param>
    /// <response code="200">Response when a list of 0 or more addresses is returned</response>
    /// <response code="401">User is not authenticated</response>
    [HttpGet]
    [Route("/v1/users/{userId}/addresses")]
    [ValidateModelState]
    [SwaggerOperation("ListAddresses")]
    [SwaggerResponse(200, type: typeof(AddressList),
        description: "Response when a list of 0 or more addresses is returned")]
    [SwaggerResponse(401, type: typeof(Error), description: "User is not authenticated")]
    public virtual IActionResult ListAddresses([FromRoute(Name = "userId")] [Required] string userId,
        [FromQuery(Name = "type")] string type)
    {
        //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(200, default(AddressList));
        //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(401, default(Error));
        string exampleJson = null;
        exampleJson =
            "{\n  \"totalItemsCount\" : 6,\n  \"pageCount\" : 0,\n  \"previousPage\" : \"previousPage\",\n  \"data\" : [ {\n    \"country\" : \"country\",\n    \"city\" : \"city\",\n    \"postalCode\" : \"postalCode\",\n    \"addressLine1\" : \"addressLine1\",\n    \"addressLine2\" : \"addressLine2\",\n    \"addressLine3\" : \"addressLine3\",\n    \"state\" : \"state\",\n    \"id\" : \"id\",\n    \"type\" : \"Primary\",\n    \"userId\" : \"userId\"\n  }, {\n    \"country\" : \"country\",\n    \"city\" : \"city\",\n    \"postalCode\" : \"postalCode\",\n    \"addressLine1\" : \"addressLine1\",\n    \"addressLine2\" : \"addressLine2\",\n    \"addressLine3\" : \"addressLine3\",\n    \"state\" : \"state\",\n    \"id\" : \"id\",\n    \"type\" : \"Primary\",\n    \"userId\" : \"userId\"\n  } ],\n  \"nextPage\" : \"nextPage\"\n}";

        var example = exampleJson != null
            ? JsonConvert.DeserializeObject<AddressList>(exampleJson)
            : default;
        //TODO: Change the data returned
        return new ObjectResult(example);
    }

    /// <summary>
    ///     Patch address
    /// </summary>
    /// <param name="userId">The string guid representing the user id</param>
    /// <param name="addressId">The string guid representing the address id</param>
    /// <param name="addressUpdate">The json representation of the address update</param>
    /// <response code="200">Response when the address was updated successfully</response>
    /// <response code="400">There was an error with the request</response>
    /// <response code="401">User is not authenticated</response>
    /// <response code="403">User is not allowed to perform action</response>
    /// <response code="404">The resource was not found</response>
    [HttpPatch]
    [Route("/v1/users/{userId}/addresses/{addressId}")]
    [Consumes("application/json")]
    [ValidateModelState]
    [SwaggerOperation("UpdateAddress")]
    [SwaggerResponse(200, type: typeof(Address), description: "Response when the address was updated successfully")]
    [SwaggerResponse(400, type: typeof(Error), description: "There was an error with the request")]
    [SwaggerResponse(401, type: typeof(Error), description: "User is not authenticated")]
    [SwaggerResponse(403, type: typeof(Error), description: "User is not allowed to perform action")]
    [SwaggerResponse(404, type: typeof(Error), description: "The resource was not found")]
    public virtual IActionResult UpdateAddress([FromRoute(Name = "userId")] [Required] string userId,
        [FromRoute(Name = "addressId")] [Required] string addressId, [FromBody] AddressUpdate addressUpdate)
    {
        //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(200, default(Address));
        //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(400, default(Error));
        //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(401, default(Error));
        //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(403, default(Error));
        //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
        // return StatusCode(404, default(Error));
        string exampleJson = null;
        exampleJson =
            "{\n  \"country\" : \"country\",\n  \"city\" : \"city\",\n  \"postalCode\" : \"postalCode\",\n  \"addressLine1\" : \"addressLine1\",\n  \"addressLine2\" : \"addressLine2\",\n  \"addressLine3\" : \"addressLine3\",\n  \"state\" : \"state\",\n  \"id\" : \"id\",\n  \"type\" : \"Primary\",\n  \"userId\" : \"userId\"\n}";

        var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Address>(exampleJson)
            : default;
        //TODO: Change the data returned
        return new ObjectResult(example);
    }
}