/*
 * Users API
 *
 * The users API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Domivice.Users.Web.Models;

/// <summary>
///     Carries information about individual or agency openning hours
/// </summary>
[DataContract]
public class BusinessHours : IEquatable<BusinessHours>
{
    /// <summary>
    ///     The date when the item becomes valid.
    /// </summary>
    /// <value>The date when the item becomes valid.</value>
    [Required]
    [DataMember(Name = "validFrom", EmitDefaultValue = false)]
    public DateTime ValidFrom { get; set; }

    /// <summary>
    ///     The date after when the item is not valid.
    /// </summary>
    /// <value>The date after when the item is not valid.</value>
    [Required]
    [DataMember(Name = "validThrough", EmitDefaultValue = false)]
    public DateTime ValidThrough { get; set; }

    /// <summary>
    ///     The opening hours record id
    /// </summary>
    /// <value>The opening hours record id</value>
    [Required]
    [DataMember(Name = "id", EmitDefaultValue = false)]
    public string Id { get; set; }

    /// <summary>
    ///     The user id
    /// </summary>
    /// <value>The user id</value>
    [Required]
    [DataMember(Name = "userId", EmitDefaultValue = false)]
    public string UserId { get; set; }

    /// <summary>
    ///     The time slots of the business hours for a given week day
    /// </summary>
    /// <value>The time slots of the business hours for a given week day</value>
    [Required]
    [DataMember(Name = "timeSlots", EmitDefaultValue = false)]
    public List<TimeSlot> TimeSlots { get; set; }

    /// <summary>
    ///     Returns true if BusinessHours instances are equal
    /// </summary>
    /// <param name="other">Instance of BusinessHours to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(BusinessHours other)
    {
        if (other is null) return false;
        if (ReferenceEquals(this, other)) return true;

        return
            (
                ValidFrom == other.ValidFrom ||
                (ValidFrom != null &&
                 ValidFrom.Equals(other.ValidFrom))
            ) &&
            (
                ValidThrough == other.ValidThrough ||
                (ValidThrough != null &&
                 ValidThrough.Equals(other.ValidThrough))
            ) &&
            (
                Id == other.Id ||
                (Id != null &&
                 Id.Equals(other.Id))
            ) &&
            (
                UserId == other.UserId ||
                (UserId != null &&
                 UserId.Equals(other.UserId))
            ) &&
            (
                TimeSlots == other.TimeSlots ||
                (TimeSlots != null &&
                 other.TimeSlots != null &&
                 TimeSlots.SequenceEqual(other.TimeSlots))
            );
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class BusinessHours {\n");
        sb.Append("  ValidFrom: ").Append(ValidFrom).Append("\n");
        sb.Append("  ValidThrough: ").Append(ValidThrough).Append("\n");
        sb.Append("  Id: ").Append(Id).Append("\n");
        sb.Append("  UserId: ").Append(UserId).Append("\n");
        sb.Append("  TimeSlots: ").Append(TimeSlots).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="obj">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object obj)
    {
        if (obj is null) return false;
        if (ReferenceEquals(this, obj)) return true;
        return obj.GetType() == GetType() && Equals((BusinessHours)obj);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            // Suitable nullity checks etc, of course :)
            if (ValidFrom != null)
                hashCode = hashCode * 59 + ValidFrom.GetHashCode();
            if (ValidThrough != null)
                hashCode = hashCode * 59 + ValidThrough.GetHashCode();
            if (Id != null)
                hashCode = hashCode * 59 + Id.GetHashCode();
            if (UserId != null)
                hashCode = hashCode * 59 + UserId.GetHashCode();
            if (TimeSlots != null)
                hashCode = hashCode * 59 + TimeSlots.GetHashCode();
            return hashCode;
        }
    }

    #region Operators

#pragma warning disable 1591

    public static bool operator ==(BusinessHours left, BusinessHours right)
    {
        return Equals(left, right);
    }

    public static bool operator !=(BusinessHours left, BusinessHours right)
    {
        return !Equals(left, right);
    }

#pragma warning restore 1591

    #endregion Operators
}