/*
 * Users API
 *
 * The users API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Domivice.Users.Web.Models;

/// <summary>
/// </summary>
[DataContract]
public class Error : IEquatable<Error>
{
    /// <summary>
    ///     A human-readable explanation of the error
    /// </summary>
    /// <value>A human-readable explanation of the error</value>
    [Required]
    [DataMember(Name = "detail", EmitDefaultValue = false)]
    public string Detail { get; set; }

    /// <summary>
    ///     A URI that identifies the specific occurrence of the error
    /// </summary>
    /// <value>A URI that identifies the specific occurrence of the error</value>
    [Required]
    [DataMember(Name = "instance", EmitDefaultValue = false)]
    public string Instance { get; set; }

    /// <summary>
    ///     The HTTP response code
    /// </summary>
    /// <value>The HTTP response code</value>
    [DataMember(Name = "status", EmitDefaultValue = false)]
    public string Status { get; set; }

    /// <summary>
    ///     A brief, human-readable message about the error
    /// </summary>
    /// <value>A brief, human-readable message about the error</value>
    [Required]
    [DataMember(Name = "title", EmitDefaultValue = false)]
    public string Title { get; set; }

    /// <summary>
    ///     A URI identifier that categorizes the error
    /// </summary>
    /// <value>A URI identifier that categorizes the error</value>
    [Required]
    [DataMember(Name = "type", EmitDefaultValue = false)]
    public string Type { get; set; }

    /// <summary>
    ///     The validation errors
    /// </summary>
    /// <value>The validation errors</value>
    [DataMember(Name = "errors", EmitDefaultValue = false)]
    public List<object> Errors { get; set; }

    /// <summary>
    ///     The error extensions
    /// </summary>
    /// <value>The error extensions</value>
    [DataMember(Name = "extensions", EmitDefaultValue = false)]
    public List<object> Extensions { get; set; }

    /// <summary>
    ///     Returns true if Error instances are equal
    /// </summary>
    /// <param name="other">Instance of Error to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(Error other)
    {
        if (other is null) return false;
        if (ReferenceEquals(this, other)) return true;

        return
            (
                Detail == other.Detail ||
                (Detail != null &&
                 Detail.Equals(other.Detail))
            ) &&
            (
                Instance == other.Instance ||
                (Instance != null &&
                 Instance.Equals(other.Instance))
            ) &&
            (
                Status == other.Status ||
                (Status != null &&
                 Status.Equals(other.Status))
            ) &&
            (
                Title == other.Title ||
                (Title != null &&
                 Title.Equals(other.Title))
            ) &&
            (
                Type == other.Type ||
                (Type != null &&
                 Type.Equals(other.Type))
            ) &&
            (
                Errors == other.Errors ||
                (Errors != null &&
                 other.Errors != null &&
                 Errors.SequenceEqual(other.Errors))
            ) &&
            (
                Extensions == other.Extensions ||
                (Extensions != null &&
                 other.Extensions != null &&
                 Extensions.SequenceEqual(other.Extensions))
            );
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class Error {\n");
        sb.Append("  Detail: ").Append(Detail).Append("\n");
        sb.Append("  Instance: ").Append(Instance).Append("\n");
        sb.Append("  Status: ").Append(Status).Append("\n");
        sb.Append("  Title: ").Append(Title).Append("\n");
        sb.Append("  Type: ").Append(Type).Append("\n");
        sb.Append("  Errors: ").Append(Errors).Append("\n");
        sb.Append("  Extensions: ").Append(Extensions).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="obj">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object obj)
    {
        if (obj is null) return false;
        if (ReferenceEquals(this, obj)) return true;
        return obj.GetType() == GetType() && Equals((Error)obj);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            // Suitable nullity checks etc, of course :)
            if (Detail != null)
                hashCode = hashCode * 59 + Detail.GetHashCode();
            if (Instance != null)
                hashCode = hashCode * 59 + Instance.GetHashCode();
            if (Status != null)
                hashCode = hashCode * 59 + Status.GetHashCode();
            if (Title != null)
                hashCode = hashCode * 59 + Title.GetHashCode();
            if (Type != null)
                hashCode = hashCode * 59 + Type.GetHashCode();
            if (Errors != null)
                hashCode = hashCode * 59 + Errors.GetHashCode();
            if (Extensions != null)
                hashCode = hashCode * 59 + Extensions.GetHashCode();
            return hashCode;
        }
    }

    #region Operators

#pragma warning disable 1591

    public static bool operator ==(Error left, Error right)
    {
        return Equals(left, right);
    }

    public static bool operator !=(Error left, Error right)
    {
        return !Equals(left, right);
    }

#pragma warning restore 1591

    #endregion Operators
}