/*
 * Users API
 *
 * The users API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Domivice.Users.Web.Converters;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Domivice.Users.Web.Models;

/// <summary>
/// </summary>
[DataContract]
public class Address : IEquatable<Address>
{
    /// <summary>
    ///     The address type. Newly created addresses should default to secondary
    /// </summary>
    /// <value>The address type. Newly created addresses should default to secondary</value>
    [TypeConverter(typeof(CustomEnumConverter<TypeEnum>))]
    [JsonConverter(typeof(StringEnumConverter))]
    public enum TypeEnum
    {
        /// <summary>
        ///     Enum PrimaryEnum for Primary
        /// </summary>
        [EnumMember(Value = "Primary")] PrimaryEnum = 1,

        /// <summary>
        ///     Enum SecondaryEnum for Secondary
        /// </summary>
        [EnumMember(Value = "Secondary")] SecondaryEnum = 2
    }

    /// <summary>
    ///     The user id
    /// </summary>
    /// <value>The user id</value>
    [Required]
    [DataMember(Name = "userId", EmitDefaultValue = false)]
    public string UserId { get; set; }

    /// <summary>
    ///     The address line 1
    /// </summary>
    /// <value>The address line 1</value>
    [Required]
    [DataMember(Name = "addressLine1", EmitDefaultValue = false)]
    public string AddressLine1 { get; set; }

    /// <summary>
    ///     The address line 2
    /// </summary>
    /// <value>The address line 2</value>
    [DataMember(Name = "addressLine2", EmitDefaultValue = false)]
    public string AddressLine2 { get; set; }

    /// <summary>
    ///     The address line 3
    /// </summary>
    /// <value>The address line 3</value>
    [DataMember(Name = "addressLine3", EmitDefaultValue = false)]
    public string AddressLine3 { get; set; }

    /// <summary>
    ///     The city
    /// </summary>
    /// <value>The city</value>
    [Required]
    [DataMember(Name = "city", EmitDefaultValue = false)]
    public string City { get; set; }

    /// <summary>
    ///     The country
    /// </summary>
    /// <value>The country</value>
    [Required]
    [DataMember(Name = "country", EmitDefaultValue = false)]
    public string Country { get; set; }

    /// <summary>
    ///     The postal code
    /// </summary>
    /// <value>The postal code</value>
    [Required]
    [DataMember(Name = "postalCode", EmitDefaultValue = false)]
    public string PostalCode { get; set; }

    /// <summary>
    ///     The state or province
    /// </summary>
    /// <value>The state or province </value>
    [Required]
    [DataMember(Name = "state", EmitDefaultValue = false)]
    public string State { get; set; }

    /// <summary>
    ///     The address id
    /// </summary>
    /// <value>The address id</value>
    [Required]
    [DataMember(Name = "id", EmitDefaultValue = false)]
    public string Id { get; set; }

    /// <summary>
    ///     The address type. Newly created addresses should default to secondary
    /// </summary>
    /// <value>The address type. Newly created addresses should default to secondary</value>
    [Required]
    [DataMember(Name = "type", EmitDefaultValue = true)]
    public TypeEnum Type { get; set; }

    /// <summary>
    ///     Returns true if Address instances are equal
    /// </summary>
    /// <param name="other">Instance of Address to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(Address other)
    {
        if (other is null) return false;
        if (ReferenceEquals(this, other)) return true;

        return
            (
                UserId == other.UserId ||
                (UserId != null &&
                 UserId.Equals(other.UserId))
            ) &&
            (
                AddressLine1 == other.AddressLine1 ||
                (AddressLine1 != null &&
                 AddressLine1.Equals(other.AddressLine1))
            ) &&
            (
                AddressLine2 == other.AddressLine2 ||
                (AddressLine2 != null &&
                 AddressLine2.Equals(other.AddressLine2))
            ) &&
            (
                AddressLine3 == other.AddressLine3 ||
                (AddressLine3 != null &&
                 AddressLine3.Equals(other.AddressLine3))
            ) &&
            (
                City == other.City ||
                (City != null &&
                 City.Equals(other.City))
            ) &&
            (
                Country == other.Country ||
                (Country != null &&
                 Country.Equals(other.Country))
            ) &&
            (
                PostalCode == other.PostalCode ||
                (PostalCode != null &&
                 PostalCode.Equals(other.PostalCode))
            ) &&
            (
                State == other.State ||
                (State != null &&
                 State.Equals(other.State))
            ) &&
            (
                Id == other.Id ||
                (Id != null &&
                 Id.Equals(other.Id))
            ) &&
            (
                Type == other.Type ||
                Type.Equals(other.Type)
            );
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class Address {\n");
        sb.Append("  UserId: ").Append(UserId).Append("\n");
        sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
        sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
        sb.Append("  AddressLine3: ").Append(AddressLine3).Append("\n");
        sb.Append("  City: ").Append(City).Append("\n");
        sb.Append("  Country: ").Append(Country).Append("\n");
        sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
        sb.Append("  State: ").Append(State).Append("\n");
        sb.Append("  Id: ").Append(Id).Append("\n");
        sb.Append("  Type: ").Append(Type).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="obj">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object obj)
    {
        if (obj is null) return false;
        if (ReferenceEquals(this, obj)) return true;
        return obj.GetType() == GetType() && Equals((Address)obj);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            // Suitable nullity checks etc, of course :)
            if (UserId != null)
                hashCode = hashCode * 59 + UserId.GetHashCode();
            if (AddressLine1 != null)
                hashCode = hashCode * 59 + AddressLine1.GetHashCode();
            if (AddressLine2 != null)
                hashCode = hashCode * 59 + AddressLine2.GetHashCode();
            if (AddressLine3 != null)
                hashCode = hashCode * 59 + AddressLine3.GetHashCode();
            if (City != null)
                hashCode = hashCode * 59 + City.GetHashCode();
            if (Country != null)
                hashCode = hashCode * 59 + Country.GetHashCode();
            if (PostalCode != null)
                hashCode = hashCode * 59 + PostalCode.GetHashCode();
            if (State != null)
                hashCode = hashCode * 59 + State.GetHashCode();
            if (Id != null)
                hashCode = hashCode * 59 + Id.GetHashCode();

            hashCode = hashCode * 59 + Type.GetHashCode();
            return hashCode;
        }
    }

    #region Operators

#pragma warning disable 1591

    public static bool operator ==(Address left, Address right)
    {
        return Equals(left, right);
    }

    public static bool operator !=(Address left, Address right)
    {
        return !Equals(left, right);
    }

#pragma warning restore 1591

    #endregion Operators
}