/*
 * Users API
 *
 * The users API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Domivice.Users.Web.Converters;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Domivice.Users.Web.Models;

/// <summary>
///     Carries information about open and closing time
/// </summary>
[DataContract]
public class TimeSlot : IEquatable<TimeSlot>
{
    /// <summary>
    ///     The day of week number
    /// </summary>
    /// <value>The day of week number</value>
    [TypeConverter(typeof(CustomEnumConverter<DayOfWeekEnum>))]
    [JsonConverter(typeof(StringEnumConverter))]
    public enum DayOfWeekEnum
    {
        /// <summary>
        ///     Enum MondayEnum for monday
        /// </summary>
        [EnumMember(Value = "monday")] MondayEnum = 1,

        /// <summary>
        ///     Enum TuesdayEnum for tuesday
        /// </summary>
        [EnumMember(Value = "tuesday")] TuesdayEnum = 2,

        /// <summary>
        ///     Enum WednesdayEnum for wednesday
        /// </summary>
        [EnumMember(Value = "wednesday")] WednesdayEnum = 3,

        /// <summary>
        ///     Enum ThursdayEnum for thursday
        /// </summary>
        [EnumMember(Value = "thursday")] ThursdayEnum = 4,

        /// <summary>
        ///     Enum FridayEnum for friday
        /// </summary>
        [EnumMember(Value = "friday")] FridayEnum = 5,

        /// <summary>
        ///     Enum SaturdayEnum for saturday
        /// </summary>
        [EnumMember(Value = "saturday")] SaturdayEnum = 6,

        /// <summary>
        ///     Enum SundayEnum for sunday
        /// </summary>
        [EnumMember(Value = "sunday")] SundayEnum = 7,

        /// <summary>
        ///     Enum PublicHolidayEnum for publicHoliday
        /// </summary>
        [EnumMember(Value = "publicHoliday")] PublicHolidayEnum = 8
    }

    /// <summary>
    ///     The closing time
    /// </summary>
    /// <value>The closing time</value>
    [Required]
    [DataMember(Name = "endTime", EmitDefaultValue = false)]
    public DateTime EndTime { get; set; }

    /// <summary>
    ///     The opening time
    /// </summary>
    /// <value>The opening time</value>
    [Required]
    [DataMember(Name = "startTime", EmitDefaultValue = false)]
    public DateTime StartTime { get; set; }

    /// <summary>
    ///     The day of week number
    /// </summary>
    /// <value>The day of week number</value>
    [Required]
    [DataMember(Name = "dayOfWeek", EmitDefaultValue = true)]
    public DayOfWeekEnum DayOfWeek { get; set; }

    /// <summary>
    ///     Returns true if TimeSlot instances are equal
    /// </summary>
    /// <param name="other">Instance of TimeSlot to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(TimeSlot other)
    {
        if (other is null) return false;
        if (ReferenceEquals(this, other)) return true;

        return
            (
                EndTime == other.EndTime ||
                (EndTime != null &&
                 EndTime.Equals(other.EndTime))
            ) &&
            (
                StartTime == other.StartTime ||
                (StartTime != null &&
                 StartTime.Equals(other.StartTime))
            ) &&
            (
                DayOfWeek == other.DayOfWeek ||
                DayOfWeek.Equals(other.DayOfWeek)
            );
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class TimeSlot {\n");
        sb.Append("  EndTime: ").Append(EndTime).Append("\n");
        sb.Append("  StartTime: ").Append(StartTime).Append("\n");
        sb.Append("  DayOfWeek: ").Append(DayOfWeek).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="obj">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object obj)
    {
        if (obj is null) return false;
        if (ReferenceEquals(this, obj)) return true;
        return obj.GetType() == GetType() && Equals((TimeSlot)obj);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            // Suitable nullity checks etc, of course :)
            if (EndTime != null)
                hashCode = hashCode * 59 + EndTime.GetHashCode();
            if (StartTime != null)
                hashCode = hashCode * 59 + StartTime.GetHashCode();

            hashCode = hashCode * 59 + DayOfWeek.GetHashCode();
            return hashCode;
        }
    }

    #region Operators

#pragma warning disable 1591

    public static bool operator ==(TimeSlot left, TimeSlot right)
    {
        return Equals(left, right);
    }

    public static bool operator !=(TimeSlot left, TimeSlot right)
    {
        return !Equals(left, right);
    }

#pragma warning restore 1591

    #endregion Operators
}