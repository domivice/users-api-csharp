/*
 * Users API
 *
 * The users API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Domivice.Users.Web.Models;

/// <summary>
///     Carries information about the user
/// </summary>
[DataContract]
public class User : IEquatable<User>
{
    /// <summary>
    ///     The string guid representing the user id
    /// </summary>
    /// <value>The string guid representing the user id </value>
    [Required]
    [DataMember(Name = "id", EmitDefaultValue = false)]
    public string Id { get; set; }

    /// <summary>
    ///     The user email
    /// </summary>
    /// <value>The user email</value>
    [Required]
    [DataMember(Name = "email", EmitDefaultValue = false)]
    public string Email { get; set; }

    /// <summary>
    ///     The user first name
    /// </summary>
    /// <value>The user first name</value>
    [Required]
    [DataMember(Name = "firstName", EmitDefaultValue = false)]
    public string FirstName { get; set; }

    /// <summary>
    ///     The user last name
    /// </summary>
    /// <value>The user last name</value>
    [Required]
    [DataMember(Name = "lastName", EmitDefaultValue = false)]
    public string LastName { get; set; }

    /// <summary>
    ///     The user status
    /// </summary>
    /// <value>The user status</value>
    [Required]
    [DataMember(Name = "status", EmitDefaultValue = false)]
    public string Status { get; set; }

    /// <summary>
    ///     The user phone number
    /// </summary>
    /// <value>The user phone number</value>
    [Required]
    [DataMember(Name = "phoneNumber", EmitDefaultValue = false)]
    public string PhoneNumber { get; set; }

    /// <summary>
    ///     Returns true if User instances are equal
    /// </summary>
    /// <param name="other">Instance of User to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(User other)
    {
        if (other is null) return false;
        if (ReferenceEquals(this, other)) return true;

        return
            (
                Id == other.Id ||
                (Id != null &&
                 Id.Equals(other.Id))
            ) &&
            (
                Email == other.Email ||
                (Email != null &&
                 Email.Equals(other.Email))
            ) &&
            (
                FirstName == other.FirstName ||
                (FirstName != null &&
                 FirstName.Equals(other.FirstName))
            ) &&
            (
                LastName == other.LastName ||
                (LastName != null &&
                 LastName.Equals(other.LastName))
            ) &&
            (
                Status == other.Status ||
                (Status != null &&
                 Status.Equals(other.Status))
            ) &&
            (
                PhoneNumber == other.PhoneNumber ||
                (PhoneNumber != null &&
                 PhoneNumber.Equals(other.PhoneNumber))
            );
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class User {\n");
        sb.Append("  Id: ").Append(Id).Append("\n");
        sb.Append("  Email: ").Append(Email).Append("\n");
        sb.Append("  FirstName: ").Append(FirstName).Append("\n");
        sb.Append("  LastName: ").Append(LastName).Append("\n");
        sb.Append("  Status: ").Append(Status).Append("\n");
        sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="obj">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object obj)
    {
        if (obj is null) return false;
        if (ReferenceEquals(this, obj)) return true;
        return obj.GetType() == GetType() && Equals((User)obj);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            // Suitable nullity checks etc, of course :)
            if (Id != null)
                hashCode = hashCode * 59 + Id.GetHashCode();
            if (Email != null)
                hashCode = hashCode * 59 + Email.GetHashCode();
            if (FirstName != null)
                hashCode = hashCode * 59 + FirstName.GetHashCode();
            if (LastName != null)
                hashCode = hashCode * 59 + LastName.GetHashCode();
            if (Status != null)
                hashCode = hashCode * 59 + Status.GetHashCode();
            if (PhoneNumber != null)
                hashCode = hashCode * 59 + PhoneNumber.GetHashCode();
            return hashCode;
        }
    }

    #region Operators

#pragma warning disable 1591

    public static bool operator ==(User left, User right)
    {
        return Equals(left, right);
    }

    public static bool operator !=(User left, User right)
    {
        return !Equals(left, right);
    }

#pragma warning restore 1591

    #endregion Operators
}